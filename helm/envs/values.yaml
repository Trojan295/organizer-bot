replicas: 1

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

metrics:
  prometheusRules:
    enabled: true
    rules:
      - alert: ServerSideErrors
        annotations:
          description: |
            {{ $labels.service }} has many errors on {{ $labels.command }}. Check the logs for more information.
          summary: Organizer bot has many server side errors.
        expr: sum by (command) (rate(organizer_bot_executed_commands_total{result=~"error_server"}[5m])) / sum by (command) (rate(organizer_bot_executed_commands_total{result=~"error_server|success"}[5m])) > 0.05
        for: 2m
        labels:
          severity: error

      - alert: ClientSideErrors
        annotations:
          description: |
            {{ $labels.service }} has many errors on {{ $labels.command }}. This could indicate bad UX for this command.
          summary: Organizer bot has many client side errors
        expr: sum by (command) (rate(organizer_bot_executed_commands_total{result=~"error_client"}[5m])) / sum by (command) (rate(organizer_bot_executed_commands_total{result=~"error_client|success"}[5m])) > 0.1
        for: 2m
        labels:
          severity: error

redis:
  architecture: standalone

  commonConfiguration: |-
    # Error on write, if using more memory. Alert the memory usage should be set.
    maxmemory 100mb
    maxmemory-policy noeviction

    # Enable AOF, fsync every second
    appendonly yes
    appendfsync everysec

    # Enabled RDB persistence with snapshot.
    save 600 1
    save 300 10
    save 60 500

  metrics:
    enabled: true

    serviceMonitor:
      enabled: true
      additionalLabels:
        release: monitoring-stack

    prometheusRule:
      enabled: true
      additionalLabels:
        release: monitoring-stack
        app: kube-prometheus-stack

      rules:
        - alert: RedisDown
          expr: redis_up{service="{{ template "common.names.fullname" . }}-metrics"} == 0
          for: 2m
          labels:
            severity: error
          annotations:
            summary: Redis&trade; instance {{ "{{ $labels.instance }}" }} down
            description: Redis&trade; instance {{ "{{ $labels.instance }}" }} is down
        - alert: RedisMemoryHigh
          expr: >
            redis_memory_used_bytes{service="{{ template "common.names.fullname" . }}-metrics"} * 100
            /
            redis_memory_max_bytes{service="{{ template "common.names.fullname" . }}-metrics"}
            > 90
          for: 2m
          labels:
            severity: error
          annotations:
            summary: Redis&trade; instance {{ "{{ $labels.instance }}" }} is using too much memory
            description: |
              Redis&trade; instance {{ "{{ $labels.instance }}" }} is using {{ "{{ $value }}" }}% of its available memory.
        - alert: RedisKeyEviction
          expr: |
            increase(redis_evicted_keys_total{service="{{ template "common.names.fullname" . }}-metrics"}[5m]) > 0
          for: 1s
          labels:
            severity: error
          annotations:
            summary: Redis&trade; instance {{ "{{ $labels.instance }}" }} has evicted keys
            description: |
              Redis&trade; instance {{ "{{ $labels.instance }}" }} has evicted {{ "{{ $value }}" }} keys in the last 5 minutes.
